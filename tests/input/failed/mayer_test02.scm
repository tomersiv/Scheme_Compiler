(and
  (boolean? #t)
  (boolean? #f)
  (not (boolean? 1234))
  (not (boolean? 'a))
  (symbol? 'b)
  (procedure? procedure?)
  (eq? (car '(a b c)) 'a)
  (= (car (cons 1 2)) 1)
  (integer? 1234)
  (char? #\a)
  (null? '())
  (string? "abc")
  (symbol? 'lambda)
  (not (string? 1234))
  (pair? '(a . b))
  (not (pair? '()))
  (zero? 0)
  (not (zero? 234))
  (= 97 (char->integer (string-ref "abc" 0)))
  (let ((n 10000))
  (= n (string-length (make-string n))))
  (= 65 (char->integer #\A))
  (= 6 (* 1 2 3))
  (= 1 (*))
  (= 234 (* 234))
  (= 6 (+ 1 2 3))
  (zero? (+))
  (= 234 (+ 234))
  (= 1 (- 6 3 2))
  (< 1 2 3 4 5)
  (> 5 4 3 2 1))
 